version: '3.5'

networks:
  db-comparison-network:
    driver: bridge
    
services:

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:6.4.0
    container_name: logstash
    ports:
      - "5044:9200"
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./logstash/logstash.conf:/etc/logstash/conf.d/logstash.conf:ro
      - ./logstash/logstash.yml:/etc/logstash/conf.d/logstash.yml:ro
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"

  # Zookeeper Service 1
  zookeeper1:
    image: bitnami/zookeeper
    container_name: zookeeper1
    hostname: zookeeper1
    restart: unless-stopped
    environment:
      ZOO_SERVER_ID: "1"
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_TICK_TIME: "2000"
      ZOO_SYNC_LIMIT: "2"
      ZOO_SERVERS: "0.0.0.0:2888:3888,zookeeper2:2888:3888,zookeeper3:2888:3888"
    networks:
      - db-comparison-network
    ports:
      - "2181:2181"
    volumes:
      - 'zoo1_data:/data'
  
  # Zookeeper Service 2
  zookeeper2:
    image: bitnami/zookeeper
    container_name: zookeeper2
    hostname: zookeeper2
    restart: unless-stopped
    environment:
      ZOO_SERVER_ID: "2"
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_TICK_TIME: "2000"
      ZOO_SYNC_LIMIT: "2"
      ZOO_SERVERS: "zookeeper1:2888:3888,0.0.0.0:2888:3888,zookeeper3:2888:3888"
    networks:
      - db-comparison-network
    ports:
      - "2182:2181"
    volumes:
      - 'zoo2_data:/data'
  
  # Zookeeper Service 3
  zookeeper3:
    image: bitnami/zookeeper
    container_name: zookeeper3
    hostname: zookeeper3
    restart: unless-stopped
    environment:
      ZOO_SERVER_ID: "3"
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_TICK_TIME: "2000"
      ZOO_SYNC_LIMIT: "2"
      ZOO_SERVERS: "zookeeper1:2888:3888,zookeeper2:2888:3888,0.0.0.0:2888:3888"
    networks:
      - db-comparison-network
    ports:
      - "2183:2181"
    volumes:
      - 'zoo3_data:/data'
  
  # Kafka Service
  kafka1:
    image: bitnami/kafka
    container_name: kafka1
    #restart: unless-stopped
    ports:
      - "19092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka1:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka1:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP:
        "INTERNAL:PLAINTEXT,\
         EXTERNAL:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_HOST_NAME: "kafka1"
      KAFKA_CFG_ADVERTISED_PORT: "9092"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - db-comparison-network
    depends_on:
        - zookeeper1
        - zookeeper2
        - zookeeper3

  kafka2:
    image: bitnami/kafka
    container_name: kafka2
    #restart: unless-stopped
    ports:
      - "29092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper2:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka2:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka2:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP:
        "INTERNAL:PLAINTEXT,\
         EXTERNAL:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_HOST_NAME: "kafka2"
      KAFKA_CFG_ADVERTISED_PORT: "9092"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - db-comparison-network
    depends_on:
        - zookeeper1
        - zookeeper2
        - zookeeper3

  kafka3:
    image: bitnami/kafka
    container_name: kafka3
    #restart: unless-stopped
    ports:
      - "39092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper3:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka3:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS:
        "INTERNAL://:9090,\
         EXTERNAL://kafka3:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP:
        "INTERNAL:PLAINTEXT,\
         EXTERNAL:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_HOST_NAME: "kafka3"
      KAFKA_CFG_ADVERTISED_PORT: "9092"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - db-comparison-network
    depends_on:
        - zookeeper1
        - zookeeper2
        - zookeeper3


  kafka-connect:
    image: confluentinc/cp-kafka-connect
    container_name: kafka-connect
    ports:
      - "18083:8083"
    networks:
      - db-comparison-network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092"
      CONNECT_GROUP_ID: "kafka-connct"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-storage-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-storage-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-storage-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema:8081"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "DEBUG"
      CONNECT_PLUGIN_PATH: "/usr/share/java/"
    depends_on:
        - kafka1
        - kafka2
        - kafka3
    
  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    container_name: kafka-connect-ui
    ports:
      - "8000:8000"
    networks:
      - db-comparison-network
    environment:
      CONNECT_URL: "http://0.0.0.0:8083,dev cluster"
  
  akhq:
    image: tchiotludo/akhq:0.18.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: 'kafka1:9092,kafka2:9092,kafka3:9092'
              schema-registry:
                url: 'http://schema-registry:8081'
              connect:
                - name: "connect"
                  url: "http://kafka-connect:8083/"
    ports:
      - 8888:8080
    depends_on:
      - kafka-connect
    networks:
      - db-comparison-network

volumes:
  zoo1_data:
  zoo2_data:
  zoo3_data: